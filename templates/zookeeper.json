{
  "AWSTemplateFormatVersion" : "2010-09-09",
  "Description" : "Hydra-in-a-Box Zookeeper stack for SolrCloud using ECS",

  "Parameters" : {
    "StackName": {
      "Type": "String",
      "Description": "Name of the ElasticBeanstalk environment"
    },
    "KeyName": {
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Description": "Name of an existing EC2 KeyPair to enable SSH access to the ECS instances"
    },
    "SubnetID": {
      "Type": "List<AWS::EC2::Subnet::Id>",
      "Description": "List of an existing subnet IDs to use for the load balancer and auto scaling group"
    },
    "SecurityGroups": {
      "Type": "List<AWS::EC2::SecurityGroup::Id>",
      "Description": "A list of security groups, such as sg-a123fd85."
    },
    "LBSecurityGroups": {
      "Type": "List<AWS::EC2::SecurityGroup::Id>",
      "Description": "A list of security groups, such as sg-a123fd85."
    },
    "DesiredCapacity": {
      "Type": "Number",
      "Default" : "3",
      "Description": "Number of instances to launch in your ECS cluster"
    },
    "MaxSize": {
      "Type": "Number",
      "Default" : "6",
      "Description": "Maximum number of instances that can be launched in your ECS cluster"
    },
    "InstanceType" : {
      "Description" : "The EC2 instance type",
      "Type" : "String",
      "Default" : "t2.micro",
      "AllowedValues" : [ "t2.micro", "t2.small", "t2.medium", "m3.medium", "m3.large", "m3.xlarge",
"m3.2xlarge", "c3.large", "c3.xlarge", "c3.2xlarge", "c3.4xlarge", "c3.8xlarge", "c4.large", "c4.xlarge",
"c4.2xlarge", "c4.4xlarge", "c4.8xlarge", "r3.large", "r3.xlarge", "r3.2xlarge", "r3.4xlarge", "r3.8xlarge",
"i2.xlarge", "i2.2xlarge", "i2.4xlarge", "i2.8xlarge", "d2.xlarge", "d2.2xlarge", "d2.4xlarge", "d2.8xlarge",
"hi1.4xlarge", "hs1.8xlarge", "cr1.8xlarge", "cc2.8xlarge"],
      "ConstraintDescription" : "must be a valid EC2 instance type."
    },
    "DockerImage" : {
      "Description" : "Docker image to run",
      "Type" : "String",
      "Default" : "hybox/exhibitor:test"
    },
    "HostedZoneName" : {
      "Description" : "Route53 zone to create an alias in",
      "Type" : "String"
    }
  },

  "Mappings" : {
    "AWSRegionToAMI" : {
      "us-east-1": {
        "AMIID": "ami-a58760b3"
      },
      "us-east-2": {
        "AMIID": "ami-a6e4bec3"
      },
      "us-west-1": {
        "AMIID": "ami-74cb9b14"
      },
      "us-west-2": {
        "AMIID": "ami-5b6dde3b"
      },
      "eu-west-1": {
        "AMIID": "ami-e3fbd290"
      },
      "eu-west-2": {
        "AMIID": "ami-77f6fc13"
      },
      "eu-central-1": {
        "AMIID": "ami-38dc1157"
      },
      "ap-northeast-1": {
        "AMIID": "ami-30bdce57"
      },
      "ap-southeast-1": {
        "AMIID": "ami-9f75ddfc"
      },
      "ap-southeast-2": {
        "AMIID": "ami-cf393cac"
      },
      "ca-central-1": {
        "AMIID": "ami-1b01b37f"
      }
    }
  },

  "Resources" : {
    "ECSCluster": {
      "Type": "AWS::ECS::Cluster"
    },
    "taskdefinition": {
      "Type": "AWS::ECS::TaskDefinition",
      "Properties" : {
        "ContainerDefinitions" : [
          {
            "Name": { "Ref" : "AWS::StackName" },
            "Cpu": "10",
            "Command": ["-c", "s3", "--s3region", { "Ref" : "AWS::Region" }, "--s3config", { "Fn::Join": [":", [{ "Ref": "S3Bucket"}, { "Ref" : "AWS::StackName" }]]}],
            "Essential": "true",
            "Image": { "Ref" : "DockerImage" },
            "Memory":"400",
            "PortMappings": [
              { "HostPort": 2181, "ContainerPort": 2181 },
              { "HostPort": 2888, "ContainerPort": 2888 },
              { "HostPort": 3888, "ContainerPort": 3888 },
              { "HostPort": 8080, "ContainerPort": 8080 }
            ]
          }
        ]
      }
    },
    "S3Bucket": {
      "Type": "AWS::S3::Bucket",
      "DeletionPolicy" : "Retain"
    },
    "EcsElasticLoadBalancer" : {
      "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties" : {
        "Scheme" : "internal",
        "Subnets" : { "Ref" : "SubnetID" },
        "CrossZone" : "true",
        "ConnectionDrainingPolicy": {
          "Enabled": true
        },
        "SecurityGroups" : { "Ref" : "LBSecurityGroups" },
        "Listeners" : [
          {
            "LoadBalancerPort" : "2181",
            "InstancePort" : "2181",
            "Protocol" : "TCP"
          },
          {
            "LoadBalancerPort" : "80",
            "InstancePort" : "8080",
            "Protocol" : "HTTP"
          }
        ],
        "HealthCheck" : {
          "Target" : "HTTP:8080/exhibitor/v1/cluster/state",
          "HealthyThreshold" : "2",
          "UnhealthyThreshold" : "10",
          "Interval" : "30",
          "Timeout" : "5"
        }
      }
    },
    "ECSRecordSet" : {
      "Type" : "AWS::Route53::RecordSet",
      "Properties" : {
        "Name" : { "Fn::Join": [ ".", [ "zookeeper", { "Ref": "HostedZoneName" } ] ] },
        "HostedZoneName" : { "Ref" : "HostedZoneName"},
        "Type" : "A",
        "AliasTarget" : {
            "HostedZoneId" : { "Fn::GetAtt" : ["EcsElasticLoadBalancer", "CanonicalHostedZoneNameID"] },
            "DNSName" : { "Fn::GetAtt" : ["EcsElasticLoadBalancer","DNSName"] }
        }
      }
    },
    "ECSAutoScalingGroup" : {
      "Type" : "AWS::AutoScaling::AutoScalingGroup",
      "Properties" : {
        "VPCZoneIdentifier" : { "Ref" : "SubnetID" },
        "LaunchConfigurationName" : { "Ref" : "ContainerInstances" },
        "MinSize" : { "Ref" : "DesiredCapacity" },
        "MaxSize" : { "Ref" : "MaxSize" },
        "DesiredCapacity" : { "Ref" : "DesiredCapacity" },
        "HealthCheckType": "ELB",
        "HealthCheckGracePeriod": "300",
        "Tags" : [
          {
            "Key" : "Name",
            "Value" : {
              "Ref" : "StackName"
            },
            "PropagateAtLaunch" : true
          }
        ]
      },
      "CreationPolicy" : {
        "ResourceSignal" : {
          "Timeout" : "PT15M"
        }
      },
      "UpdatePolicy": {
        "AutoScalingRollingUpdate": {
          "MinInstancesInService": "2",
          "MaxBatchSize": "1",
          "PauseTime" : "PT10M",
          "WaitOnResourceSignals": "true"
        }
      }
    },
    "ContainerInstances": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata" : {
        "AWS::CloudFormation::Init" : {
          "config" : {

            "commands" : {
              "01_add_instance_to_cluster" : {
                "command" : { "Fn::Join": [ "", [ "#!/bin/bash\n", "echo ECS_CLUSTER=", { "Ref": "ECSCluster" }, " >> /etc/ecs/ecs.config" ] ] }
              }
            },

            "files" : {
              "/etc/cfn/cfn-hup.conf" : {
                "content" : { "Fn::Join" : ["", [
                  "[main]\n",
                  "stack=", { "Ref" : "AWS::StackId" }, "\n",
                  "region=", { "Ref" : "AWS::Region" }, "\n"
                ]]},
                "mode"    : "000400",
                "owner"   : "root",
                "group"   : "root"
              },
              "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                "content": { "Fn::Join" : ["", [
                  "[cfn-auto-reloader-hook]\n",
                  "triggers=post.update\n",
                  "path=Resources.ContainerInstances.Metadata.AWS::CloudFormation::Init\n",
                  "action=/opt/aws/bin/cfn-init -v ",
                  "         --stack ", { "Ref" : "AWS::StackName" },
                  "         --resource ContainerInstances ",
                  "         --region ", { "Ref" : "AWS::Region" }, "\n",
                  "runas=root\n"
                ]]}
              }
            },

            "services" : {
              "sysvinit" : {
                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true", "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"] }
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId" : { "Fn::FindInMap" : [ "AWSRegionToAMI", { "Ref" : "AWS::Region" }, "AMIID" ] },
        "InstanceType"   : { "Ref" : "InstanceType" },
        "IamInstanceProfile": { "Ref": "EC2InstanceProfile" },
        "KeyName"        : { "Ref" : "KeyName" },
        "SecurityGroups" : { "Ref" : "SecurityGroups" },
        "AssociatePublicIpAddress" : "true",
        "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
             "#!/bin/bash -xe\n",
             "yum install -y aws-cfn-bootstrap\n",

             "/opt/aws/bin/cfn-init -v ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource ContainerInstances ",
             "         --region ", { "Ref" : "AWS::Region" }, "\n",

             "/opt/aws/bin/cfn-signal -e $? ",
             "         --stack ", { "Ref" : "AWS::StackName" },
             "         --resource ECSAutoScalingGroup ",
             "         --region ", { "Ref" : "AWS::Region" }, "\n"
        ]]}}
      }
    },
    "service": {
      "Type": "AWS::ECS::Service",
      "DependsOn": ["ECSAutoScalingGroup"],
      "Properties" : {
        "Cluster": {"Ref": "ECSCluster"},
        "DesiredCount": { "Ref" : "DesiredCapacity" },
        "LoadBalancers": [
          {
            "ContainerName": { "Ref" : "AWS::StackName" },
            "ContainerPort": "2181",
            "LoadBalancerName" : { "Ref" : "EcsElasticLoadBalancer" }
          }
        ],
        "Role" : {"Ref":"ECSServiceRole"},
        "TaskDefinition" : {"Ref":"taskdefinition"}
      }
    },
    "ECSServiceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ecs.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns" : ["arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole"]
      }
    },
    "EC2Role": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/",
        "ManagedPolicyArns" : ["arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role"],
        "Policies": [
          {
            "PolicyName": { "Fn::Join" : ["-", [{ "Ref": "StackName" },"exhibitor-s3"]]},
            "PolicyDocument": {
              "Statement": [
                {
                  "Action": [
                    "s3:AbortMultipartUpload",
                    "s3:DeleteObject",
                    "s3:GetBucketAcl",
                    "s3:GetBucketPolicy",
                    "s3:GetObject",
                    "s3:GetObjectAcl",
                    "s3:ListBucket",
                    "s3:ListBucketMultipartUploads",
                    "s3:ListMultipartUploadParts",
                    "s3:PutObject",
                    "s3:PutObjectAcl"
                  ],
                  "Effect": "Allow",
                  "Resource": [
                    { "Fn::Join": ["", ["arn:aws:s3:::", { "Ref": "S3Bucket"}, "/*"]]},
                    { "Fn::Join": ["", ["arn:aws:s3:::", { "Ref": "S3Bucket"}]]}
                  ]
                }
              ]
            }
          }
        ]
      }
    },
    "EC2InstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "EC2Role"
          }
        ]
      }
    }
  },

  "Outputs" : {
    "EndpointAddress" : {
      "Value": {
         "Fn::Join": [
           "",
           [
             { "Ref" : "ECSRecordSet" },
            ":2181"
           ]
         ]
       }
    },
    "ui" : {
      "Value": {
         "Fn::Join": [
           "",
           [
            "http://",
             { "Ref" : "ECSRecordSet" },
            "/exhibitor/v1/ui/index.html"
           ]
         ]
       }
    }
  }
}
